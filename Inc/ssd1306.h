/*
 * ssd1306.h
 *
 *  Created on: 14/04/2018
 *  Update on: 10/04/2019
 *      Author: Andriy Honcharenko
 *      version: 2
 */

#ifndef SSD1306_H_
#define SSD1306_H_

/* CODE BEGIN Includes */
#include "ssd1306_defines.h"
#include "fonts.h"
#include "main.h"
#include <stdlib.h>
#include <string.h>
/* CODE END Includes */

/* CODE BEGIN Private defines */
// I2c port as defined in main generated by CubeMx
#define SSD1306_I2C_PORT		STM32_I2C_PORT
// I2c address
#define SSD1306_I2C_ADDR        SSD1306_ADDRESS<<1 // 0x3C<<1 = 0x78

#ifdef SSD1306_128X64
#define SSD1306_GEOMETRY		GEOMETRY_128_64
// SSD1306 width in pixels
#define SSD1306_WIDTH           128
// SSD1306 LCD height in pixels
#define SSD1306_HEIGHT          64
#elif SSD1306_128X32
#define SSD1306_GEOMETRY		GEOMETRY_128_32
// SSD1306 width in pixels
#define SSD1306_WIDTH           128
// SSD1306 LCD height in pixels
#define SSD1306_HEIGHT          32
#endif

// SSD1306 LCD Buffer Size
#define SSD1306_BUFFER_SIZE		(SSD1306_WIDTH * SSD1306_HEIGHT / 8)

// Display commands
#define CHARGEPUMP 			0x8D
#define COLUMNADDR 			0x21
#define COMSCANDEC 			0xC8
#define COMSCANINC 			0xC0
#define DISPLAYALLON 		0xA5
#define DISPLAYALLON_RESUME 0xA4
#define DISPLAYOFF 			0xAE
#define DISPLAYON 			0xAF
#define EXTERNALVCC 		0x1
#define INVERTDISPLAY 		0xA7
#define MEMORYMODE 			0x20
#define NORMALDISPLAY 		0xA6
#define PAGEADDR 			0x22
#define SEGREMAP 			0xA0
#define SETCOMPINS 			0xDA
#define SETCONTRAST 		0x81
#define SETDISPLAYCLOCKDIV 	0xD5
#define SETDISPLAYOFFSET 	0xD3
#define SETHIGHCOLUMN 		0x10
#define SETLOWCOLUMN 		0x00
#define SETMULTIPLEX 		0xA8
#define SETPRECHARGE 		0xD9
#define SETSEGMENTREMAP 	0xA1
#define SETSTARTLINE		0x40
#define SETVCOMDETECT 		0xDB
#define SWITCHCAPVCC 		0x2

#define SWAP_INT16_T(a, b) { int16_t t = a; a = b; b = t; }
/* CODE END Private defines */

/* CODE BEGIN Private typedefs */
//
//  Enumeration for screen colors
//
typedef enum {
	Black = 0x00, // Black color, no pixel
	White = 0x01,  //Pixel is set. Color depends on LCD
	Inverse = 0x02
} SSD1306_COLOR;

typedef enum {
  GEOMETRY_128_64   = 0,
  GEOMETRY_128_32   = 1
}SSD1306_Geometry;
//
//  Struct to store transformations
//
typedef struct {
	uint16_t CurrentX;
	uint16_t CurrentY;
	uint8_t Inverted;
	SSD1306_COLOR Color;
	uint8_t Initialized;
} SSD1306_t;
/* CODE END Private typedefs */

/* CODE BEGIN External variables */
//	Definition of the i2c port in main
extern I2C_HandleTypeDef SSD1306_I2C_PORT;
/* CODE END External variables */

/* CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
uint16_t ssd1306_GetWidth(void);
uint16_t ssd1306_GetHeight(void);
SSD1306_COLOR ssd1306_GetColor(void);
void ssd1306_SetColor(SSD1306_COLOR color);
uint8_t ssd1306_Init(void);
void ssd1306_Fill();
void ssd1306_UpdateScreen(void);
void ssd1306_DrawPixel(uint8_t x, uint8_t y);
void ssd1306_DrawBitmap(uint8_t X, uint8_t Y, uint8_t W, uint8_t H, const uint8_t* pBMP);
void ssd1306_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1);
void ssd1306_DrawVerticalLine(int16_t x, int16_t y, int16_t length);
void ssd1306_DrawHorizontalLine(int16_t x, int16_t y, int16_t length);
void ssd1306_DrawRect(int16_t x, int16_t y, int16_t width, int16_t height);
void ssd1306_DrawTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3);
void ssd1306_FillRect(int16_t xMove, int16_t yMove, int16_t width, int16_t height);
void ssd1306_DrawCircle(int16_t x0, int16_t y0, int16_t radius);
void ssd1306_FillCircle(int16_t x0, int16_t y0, int16_t radius);
void ssd1306_DrawCircleQuads(int16_t x0, int16_t y0, int16_t radius, uint8_t quads);
void ssd1306_DrawProgressBar(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t progress);
char ssd1306_WriteChar(char ch, FontDef Font);
char ssd1306_WriteString(char* str, FontDef Font);
void ssd1306_SetCursor(uint8_t x, uint8_t y);
void ssd1306_DisplayOn(void);
void ssd1306_DisplayOff(void);
void ssd1306_InvertDisplay(void);
void ssd1306_NormalDisplay(void);
void ssd1306_ResetOrientation(void);
void ssd1306_FlipScreenVertically(void);
void ssd1306_MirrorScreen(void);
void ssd1306_Clear(void);
/* CODE END PFP */
#endif /* SSD1306_H_ */
